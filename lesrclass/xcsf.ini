# xcsf.ini

##### experiments & output ####################################################
# numberOfExperiments   Specifies the number of investigated experiments.
# averageExploitTrials  The number of test instances that should be averaged
#                       in the performance evaluation.
# initialSeed           The initialization of the pseudo random generator.
#                       Must be at least one and smaller than 2147483647. Will
#                       be used only if "doRandomize" is set to false.
# doRandomize           Specifies if the seed should be randomized (based on
#                       the current milliseconds of the computer time). For
#                       reproducable experiments turn off multi-threading.
# multiThreading        Indicates the use of multi-threaded matching to speed
#                       up the learning time. Note that multi-threaded
#                       experiments are not reproducable due to concurrency.
# threadingThreshold    If the actual population size is below this threshold,
#                       serial single-core matching is applied. If the size is
#                       above the threshold, multi-threading is activated. The
#                       value can also be set to 'auto', which indicates that
#                       XCSF automatically adapts the threshold depending on
#                       periodical system time measurements. The latter assures
#                       that XCSF does not waste time with multi-threading
#                       where not appropriate, but starts multi-threading when
#                       there is a speedup. This depends on the architecture,
#                       the condition type and the underlying problem.
#                       Default: auto
# verbose               If this flag is true, XCSF prints informative messages
#                       about its current status, otherwise nothing is printed
#                       at all.
numberOfExperiments = 1
averageExploitTrials = 2000
initialSeed = 101
doRandomize = true
multiThreading = true
threadingThreshold = auto
verbose = true

##### xcsf settings ###########################################################
# maxLearningIterations  The number of learning iterations in one experiment.
# maxPopSize             The maximum number of micro classifiers in the
#                        population. Tune this value to the problem at hand.
# epsilon_0              The target error threshold for XCSF to reach.
#                        Classifiers with a prediction error below epsilon_0
#                        are considered as accurate. Tune this value to the
#                        problem at hand.
# conditionType          Specifies the condition type by a fully qualified
#                        binary class name that can be loaded using a
#                        ClassLoader. For example, the binary name for the
#                        class String is: java.lang.String
#                        Default: xcsf.classifier.ConditionRotatingEllipsoid
# predictionType         Specifies the prediction class by a fully qualified
#                        binary name to be loaded by a ClassLoader.
#                        Default: xcsf.classifier.PredictionLinearRLS
# minConditionStretch    The minimum stretch of classifiers for covering.
# coverConditionRange    The range of randomization for covering. The maximum
#                        stretch is minConditionStretch + coverConditionRange.
#                        In order to assure coverage of high-dimensional
#                        spaces, the maximum stretch should be close to the
#                        search space range, which is 1 for standard condition
#                        implementations.
# beta                   The learning rate for updating fitness, prediction
#                        error, and set size estimate in xcsf's classifiers.
#                        Default: 0.1
# delta                  The fraction of the mean fitness of the population
#                        below which the fitness of a classifier may be
#                        considered in its vote for deletion. Default: 0.1
# alpha                  The accuracy factor (decrease) in inaccurate
#                        classifiers. Turned off by default: 1.0
maxLearningIterations = 100000
maxPopSize = 3000
epsilon_0 = 0.01
#conditionType = xcsf.classifier.ConditionRotatingEllipsoid
conditionType = xcsf.classifier.ConditionRectangle
predictionType = xcsf.classifier.PredictionLinearRLS
#predictionType = xcsf.classifier.PredictionConstant
minConditionStretch = 0.025  
#minConditionStretch = 0.005  
coverConditionRange = 0.995
beta = 0.1
delta = 0.1
alpha = 1.0

##### compaction & matching ###################################################
# startCompaction        The compaction begins at this percentage of
#                        maxLearningIterations. The compaction is not activated
#                        if this value is greater than 1. Default: 0.9
# compactionType         The compaction type:
#           0 = condensation and normal matching
#           1 = condensation and closest classifier matching
#           2 = condensation, greedy compaction and normal matching
#           3 = condensation, greedy compaction and closest classifier matching
#                        Default: 1
# doNumClosestMatch      Specifies if closest classifier matching is always
#                        active. Default: false
# numClosestMatch        The number of closest classifiers in the matchset, if
#                        doNumClosestMatch is true. Default: 20
startCompaction = 0.9
compactionType = 1
doNumClosestMatch = false
numClosestMatch = 20

##### evolution parameters ####################################################
# theta_GA          The threshold for the GA application. Default: 50
# selectionType     Choice of selection type:
#                   0 = proportionate selection
#                   ]0,1] = tournament selection (set-size proportional)
#                   Default: 0.4 (tournament selection)
# pM                The relative probability of mutation. For each allele, the
#                   probability of mutation is mu=pM/n, where n is the number
#                   of alleles in the condition. Set to one, the probability
#                   for one allele is 1/n and, thus, on average one allele is
#                   modified per mutation. Default: 1.0
# pX                The probability to apply crossover to the offspring, often
#                   termed chi. Default: 1.0
# theta_del         Specifies the threshold over which the fitness of a
#                   classifier may be considered in its deletion probability.
#                   Default: 20
# theta_sub         The experience of a classifier required to be a subsumer.
#                   Default: 20
# doGASubsumption   Specifies if GA subsumption should be executed.
#                   Default: true
theta_GA = 50
selectionType = 0.4
pM = 1.0
pX = 1.0
theta_del = 20
theta_sub = 20
doGASubsumption = true

##### classifier error & fitness ##############################################
# nu                         Specifies the exponent in the power function for
#                            the fitness evaluation. Default: 5
# predictionErrorReduction   The factor (reduction) of the prediction error
#                            when generating an offspring classifier.
#                            Default: 1.0 (no reduction)
# fitnessReduction           The factor (reduction) of the fitness when
#                            generating an offspring classifier. Default: 0.1
# predictionErrorIni         The initial prediction error value when generating
#                            a new classifier (covering). Default: 0.0
# fitnessIni                 The initial fitness value when generating a new
#                            classifier (covering). Default: 0.01
nu = 5
predictionErrorReduction = 1.0
fitnessReduction = 0.1
predictionErrorIni = 0.0
fitnessIni = 0.01

##### recursive least squares prediction ######################################
# rlsInitScaleFactor            The initial diagonalvalues of the gainmatrix.
#                               Deault: 1000
# lambdaRLS                     Forget rate for RLS. Warning: Small values may
#                               lead to instabilities. Default: 1.0
# resetRLSPredictionsAfterSteps If set, then after the specified percentage of
#                               iterations, all gain matrizes are reset
#                               according to the initial scale factor.
#                               You can set an double (0 < percentage< 1) or
#                               the tag 'startCompaction', which corresponds to
#                               resetting the gain matrizes when compaction
#                               starts. Default: startCompaction
# predictionOffsetValue         The offset factor that is multiplied with the
#                               first coefficient (actually that is the offset)
#                               of the prediction. For centered data this can
#                               be set to zero. Default: 1
rlsInitScaleFactor = 1000
lambdaRLS = 1
resetRLSPredictionsAfterSteps = startCompaction
predictionOffsetValue = 1
